import asyncio
import os
import whisper 
from moviepy import VideoFileClip 
from dotenv import load_dotenv
from deep_translator import GoogleTranslator

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# --- –ó–ê–ì–†–£–ó–ö–ê –ú–û–î–ï–õ–ò WHISPER ---
print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper...")
model = whisper.load_model("base")
print("–ú–æ–¥–µ–ª—å Whisper –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

# --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ô ---
# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
class TranscriptionStates(StatesGroup):
    WaitingForLanguageChoice = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- –°–û–ó–î–ê–ù–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ (–ö–ù–û–ü–û–ö) ---
# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö
language_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en"),
        InlineKeyboardButton(text="üá™üá∏ Espa√±ol", callback_data="lang_es")
    ]
])


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ---

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start """
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç!\n–Ø –≥–æ—Ç–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤–∏–¥–µ–æ.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª."
    )

@dp.message(F.video)
async def handle_video(message: types.Message, state: FSMContext):
    """
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.
    –û–Ω –Ω–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç, –∞ —Ç–æ–ª—å–∫–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —è–∑—ã–∫.
    """
    # --- –î–û–ë–ê–í–õ–ï–ù–ê –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–ê –§–ê–ô–õ–ê ---
    # 20 * 1024 * 1024 = 20 MB –≤ –±–∞–π—Ç–∞—Ö
    if message.video.file_size > 20 * 1024 * 1024:
        await message.reply("‚ùå –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.\n–Ø –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 20 –ú–ë.")
        return # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    # -----------------------------------------
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–∞–π–ª–∞ –≤ "–ø–∞–º—è—Ç—å" —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ
    await state.update_data(video_file_id=message.video.file_id)
    
    # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.reply("–ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ —Ä–µ—á—å –≤ –≤–∏–¥–µ–æ?", reply_markup=language_keyboard)
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    await state.set_state(TranscriptionStates.WaitingForLanguageChoice)

@dp.callback_query(TranscriptionStates.WaitingForLanguageChoice)
async def process_language_choice(callback: types.CallbackQuery, state: FSMContext):
    """
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.
    –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—Å—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞.
    """
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'lang_en' -> 'en')
    lang = callback.data.split('_')[1]
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ä–∞–Ω–µ–µ
    user_data = await state.get_data()
    file_id = user_data.get('video_file_id')
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–ø–∞–ª–∏ "—á–∞—Å–∏–∫–∏"
    await callback.answer()
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—è, —á—Ç–æ —Ä–∞–±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å
    await callback.message.edit_text(f"–ü—Ä–∏–Ω—è—Ç–æ: '{lang}'. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    video_path = None
    audio_path = None
    try:
        # --- –î–∞–ª—å—à–µ –∏–¥–µ—Ç —É–∂–µ –∑–Ω–∞–∫–æ–º–∞—è –Ω–∞–º –ª–æ–≥–∏–∫–∞ ---
        file = await bot.get_file(file_id)
        file_path = file.file_path
        
        video_path = f"downloads/{file_id}.mp4"
        audio_path = f"downloads/{file_id}.mp3"
        os.makedirs('downloads', exist_ok=True)
        
        await bot.download_file(file_path, destination=video_path)
        
        video_clip = VideoFileClip(video_path)
        video_clip.audio.write_audiofile(audio_path, logger=None) # logger=None —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ª–∏—à–Ω–µ–≥–æ –≤—ã–≤–æ–¥–∞
        video_clip.close()
        
        result = model.transcribe(audio_path, language=lang)
        transcribed_text = result["text"]

        if not transcribed_text.strip():
            await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≤–∏–¥–µ–æ.")
            return

        translator = GoogleTranslator(source=lang, target='ru')
        translated_text = translator.translate(transcribed_text)
        
        response_text = (
            f"**–û—Ä–∏–≥–∏–Ω–∞–ª ({lang}):**\n{transcribed_text}\n\n"
            f"**–ü–µ—Ä–µ–≤–æ–¥ (ru):**\n{translated_text}"
        )
        await callback.message.edit_text(response_text) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.")
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if video_path and os.path.exists(video_path): os.remove(video_path)
        if audio_path and os.path.exists(audio_path): os.remove(audio_path)
        # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞—è –¥–∏–∞–ª–æ–≥
        await state.clear()


# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
async def main() -> None:
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.run(main())